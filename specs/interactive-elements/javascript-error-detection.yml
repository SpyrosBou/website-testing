# JavaScript Error Detection Specification
# Detects and validates JavaScript errors and interactive element functionality

metadata:
  category: "interactive-elements"
  version: "1.0.0"
  description: "Detects JavaScript errors and validates interactive functionality"
  priority: "critical"
  dependencies: ["test-helpers", "site-loader", "test-data-factory"]
  tags:
    - "javascript-errors"
    - "interactive-testing"
    - "user-experience"

configuration:
  timeout: 30000
  retries: 2
  parallel: true
  browsers: ["chrome", "firefox", "safari"]
  javascript_monitoring:
    capture_console_errors: true
    capture_console_warnings: false
    capture_network_errors: true
    ignore_third_party: true

error_patterns:
  critical_errors:
    - "TypeError"
    - "ReferenceError"
    - "SyntaxError"
    - "RangeError"
  
  ignorable_patterns:
    - "analytics"
    - "google-analytics"
    - "gtag"
    - "facebook"
    - "twitter"
    - "linkedin"
    - "pinterest"
    - "instagram"
    - "Non-Error promise rejection captured"
    - "Script error"  # Cross-origin scripts

test_cases:
  - name: "javascript_error_detection"
    description: "Monitor and detect JavaScript errors during page interactions"
    priority: "critical"
    reporting:
      epic: "Interactive Elements"
      feature: "JavaScript Error Detection"
      story: "As a user, I want pages to function without JavaScript errors"
      severity: "critical"
    
    setup:
      - action: "setup_console_monitoring"
        capture_types: ["error", "warn"]
        description: "Set up console error monitoring"
      - action: "setup_page_error_monitoring"
        description: "Monitor for uncaught page errors"
    
    execution:
      for_each_page: "{{siteConfig.testPages}}"
      conditions:
        - response_status: 200
      steps:
        - action: "navigate_safely"
          target: "{{baseUrl}}{{currentPage}}"
          description: "Navigate to {{currentPage}}"
        
        - action: "wait_for_page_stability"
          strategies: ["domcontentloaded", "networkidle"]
          description: "Wait for page to stabilize"
        
        - action: "capture_initial_errors"
          description: "Capture any errors from page load"
        
        - action: "interact_with_page_elements"
          timeout: 15000
          description: "Interact with page elements to trigger JavaScript"
        
        - action: "capture_interaction_errors"
          description: "Capture errors from user interactions"
        
        - action: "analyze_and_report_errors"
          filter_third_party: true
          categorize_severity: true
          description: "Analyze and categorize JavaScript errors"

  - name: "interactive_element_testing"
    description: "Test interactive elements using semantic queries and user simulation"
    priority: "high"
    reporting:
      epic: "Interactive Elements"
      feature: "Interactive Element Testing"
      story: "As a user, I want interactive elements to respond correctly"
      severity: "normal"
    
    execution:
      for_each_page: "{{siteConfig.testPages}}"
      limit: 8  # Limit for performance
      steps:
        - action: "discover_interactive_elements"
          semantic_roles:
            - "button"
            - "link"
            - "tab"
            - "menuitem"
            - "checkbox"
            - "radio"
            - "textbox"
            - "combobox"
          css_fallbacks:
            - "button"
            - "a"
            - "input[type='button']"
            - "input[type='submit']"
            - ".btn"
            - ".button"
          max_elements_per_type: 8
          description: "Discover interactive elements using semantic queries"
        
        - action: "test_element_interactions"
          interactions:
            buttons:
              - click: true
              - keyboard_activation: "Enter Space"
            links:
              - click: true
              - keyboard_activation: "Enter"
            forms:
              - fill: true
              - submit: false  # Don't actually submit
            menus:
              - hover: true
              - click: true
              - keyboard_navigation: true
          safe_interaction: true  # Prevent actual form submissions
          description: "Test interactions with discovered elements"
        
        - action: "validate_interaction_responses"
          expected_behaviors:
            - no_javascript_errors: true
            - page_responds: true
            - visual_feedback: true
            - accessibility_maintained: true
          description: "Validate element interaction responses"

  - name: "form_interaction_testing"
    description: "Test form interactions and validation using test data"
    priority: "high"
    reporting:
      epic: "Interactive Elements"
      feature: "Form Interaction Testing"
      story: "As a user, I want forms to work correctly and validate input"
      severity: "normal"
    
    execution:
      dynamic_form_detection: true
      steps:
        - action: "detect_forms_on_page"
          selectors:
            - "form"
            - ".wpcf7-form"  # Contact Form 7
            - ".gform_wrapper form"  # Gravity Forms
            - ".elementor-form"  # Elementor
            - ".wpforms-form"  # WPForms
          description: "Detect forms using multiple strategies"
        
        - action: "analyze_form_structure"
          for_each_form: true
          extract:
            - field_types: true
            - validation_attributes: true
            - required_fields: true
            - submit_methods: true
          description: "Analyze form structure and requirements"
        
        - action: "test_form_field_interactions"
          using_test_data: true
          interactions:
            text_fields:
              - fill_valid_data: true
              - fill_invalid_data: true
              - clear_and_refill: true
            email_fields:
              - fill_valid_email: true
              - fill_invalid_email: true
            required_fields:
              - test_validation: true
            submit_buttons:
              - validate_without_submit: true  # Test validation without actual submission
          description: "Test form field interactions with various data"
        
        - action: "validate_form_behavior"
          checks:
            - client_side_validation: true
            - error_message_display: true
            - field_highlighting: true
            - accessibility_announcements: true
          description: "Validate form behavior and user feedback"

assertions:
  critical:
    - "No critical JavaScript errors on page load"
    - "No errors during user interactions"
    - "Forms handle input validation correctly"
    - "Interactive elements respond to user actions"
  
  normal:
    - "Console warnings are minimal and non-critical"
    - "All interactive elements are keyboard accessible"
    - "Form validation provides clear feedback"
  
  minor:
    - "Third-party script errors are ignored"
    - "Performance impact of interactions is minimal"

error_handling:
  soft_assertions: true
  interaction_error_handling:
    - continue_on_interaction_failure: true
    - log_failed_interactions: true
    - attempt_alternative_methods: true
  
  javascript_error_handling:
    - filter_known_third_party_errors: true
    - categorize_by_severity: true
    - provide_debugging_context: true

integration:
  reporting_reporting:
    attach_console_logs: true
    include_interaction_videos: true
    error_categorization: true
  
  test_data_integration:
    use_test_data_factory: true
    generate_dynamic_test_data: true
    validate_data_handling: true
  
  accessibility_integration:
    check_aria_updates: true
    validate_screen_reader_announcements: true
    test_keyboard_interactions: true