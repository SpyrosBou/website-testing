# Performance Monitoring Specification
# Validates page load times and Core Web Vitals for WordPress sites

metadata:
  category: "core-infrastructure"
  version: "1.0.0"
  description: "Monitors page performance and load times"
  priority: "high"
  dependencies: ["test-helpers", "site-loader"]
  tags:
    - "performance"
    - "core-web-vitals"
    - "user-experience"

configuration:
  timeout: 45000  # Extended for performance measurement
  retries: 1      # Performance tests are less suitable for retries
  parallel: false # Run sequentially for accurate timing
  browsers: ["chrome", "firefox"]  # Safari has different performance APIs

performance_thresholds:
  page_load_time: 3000      # 3 seconds
  dom_content_loaded: 2000  # 2 seconds  
  first_paint: 1500         # 1.5 seconds
  largest_content_paint: 2500  # 2.5 seconds
  cumulative_layout_shift: 0.1  # CLS threshold
  first_input_delay: 100    # 100ms

test_cases:
  - name: "page_load_performance"
    description: "Measure and validate page load performance metrics"
    priority: "high"
    allure:
      epic: "Core Infrastructure"
      feature: "Performance Monitoring"
      story: "As a user, I want pages to load quickly for good user experience"
      severity: "normal"
    
    setup:
      - action: "load_site_config"
        description: "Load site configuration"
      - action: "clear_browser_cache"
        description: "Clear cache for accurate measurement"
      - action: "setup_performance_monitoring"
        description: "Initialize performance measurement tools"
    
    execution:
      for_each_page: "{{siteConfig.testPages}}"
      limit: 10  # Limit to first 10 pages for performance testing
      steps:
        - action: "start_performance_measurement"
          description: "Begin timing measurement for {{currentPage}}"
        
        - action: "navigate_safely"
          target: "{{baseUrl}}{{currentPage}}"
          timeout: 30000
          description: "Navigate to {{currentPage}}"
        
        - action: "wait_for_load_state"
          state: "domcontentloaded"
          description: "Wait for DOM content loaded"
        
        - action: "wait_for_load_state" 
          state: "networkidle"
          timeout: 10000
          description: "Wait for network idle"
        
        - action: "measure_performance_metrics"
          metrics:
            - navigation_timing
            - paint_timing
            - core_web_vitals
          description: "Capture performance metrics"
        
        - action: "validate_performance_thresholds"
          thresholds: "{{performanceThresholds}}"
          report_level: "warning"  # Don't fail tests, just warn
          description: "Check performance against thresholds"
        
        - action: "log_performance_results"
          format: "allure_attachment"
          description: "Attach performance data to test report"

  - name: "resource_loading_efficiency"
    description: "Validate resource loading efficiency and identify bottlenecks"
    priority: "medium"
    allure:
      epic: "Core Infrastructure"
      feature: "Resource Loading"
      story: "As a developer, I want to identify performance bottlenecks"
      severity: "normal"
    
    execution:
      sample_pages: 3  # Test representative sample
      steps:
        - action: "analyze_resource_loading"
          capture:
            - network_requests
            - resource_timing
            - blocked_resources
          description: "Analyze resource loading patterns"
        
        - action: "identify_performance_issues"
          checks:
            - large_resources: ">2MB"
            - slow_requests: ">5000ms"
            - failed_requests: "status >= 400"
            - duplicate_requests: true
          description: "Identify potential performance issues"
        
        - action: "generate_performance_recommendations"
          output: "allure_attachment"
          description: "Generate actionable performance recommendations"

assertions:
  warning_level:  # These generate warnings, not failures
    - "Page load time under 3 seconds"
    - "DOM content loaded under 2 seconds"
    - "No resources larger than 2MB"
    - "No requests taking longer than 5 seconds"
  
  informational:
    - "Core Web Vitals scores recorded"
    - "Resource loading patterns analyzed"
    - "Performance recommendations generated"

error_handling:
  soft_assertions: true
  continue_on_slow_pages: true
  timeout_handling:
    - log_timeout_details: true
    - continue_with_next_page: true
    - report_as_performance_issue: true

integration:
  allure_reporting:
    include_performance_charts: true
    attach_metrics: true
    performance_trends: true
  
  wordpress_specific:
    identify_plugin_performance_impact: true
    measure_theme_loading_time: true
    analyze_wp_queries: false  # Requires database access