# Response Validation Specification
# Validates HTTP responses, headers, and basic content integrity

metadata:
  category: "core-infrastructure"
  version: "1.0.0"
  description: "Validates HTTP responses and content integrity"
  priority: "critical"
  dependencies: ["test-helpers", "site-loader"]
  tags:
    - "http-validation"
    - "content-integrity"
    - "security-headers"

configuration:
  timeout: 20000
  retries: 2
  parallel: true
  browsers: ["chrome", "firefox", "safari"]

test_cases:
  - name: "http_response_validation"
    description: "Validate HTTP responses and status codes"
    priority: "critical"
    reporting:
      epic: "Core Infrastructure"
      feature: "HTTP Response Validation"
      story: "As a user, I want reliable HTTP responses from the website"
      severity: "critical"
    
    execution:
      for_each_page: "{{siteConfig.testPages}}"
      steps:
        - action: "navigate_safely"
          target: "{{baseUrl}}{{currentPage}}"
          capture_response: true
          description: "Navigate and capture response for {{currentPage}}"
        
        - action: "validate_response_status"
          expected_statuses: [200, 301, 302]
          description: "Verify response status is acceptable"
        
        - action: "validate_response_headers"
          required_headers:
            - "content-type"
          security_headers:
            - "x-frame-options"
            - "x-content-type-options"
            - "x-xss-protection"
          description: "Check for required and security headers"
        
        - action: "validate_content_type"
          expected: "text/html"
          description: "Verify content type is HTML"
        
        - action: "check_response_size"
          min_size: 100      # Minimum reasonable HTML size
          max_size: 5242880  # 5MB maximum
          description: "Validate response size is reasonable"

  - name: "content_integrity_validation"
    description: "Validate basic HTML content integrity and structure"
    priority: "high"
    reporting:
      epic: "Core Infrastructure"
      feature: "Content Integrity"
      story: "As a user, I want properly structured HTML content"
      severity: "normal"
    
    execution:
      for_each_page: "{{siteConfig.testPages}}"
      conditions:
        - response_status: 200
      steps:
        - action: "validate_html_structure"
          checks:
            - valid_doctype: true
            - html_lang_attribute: true
            - charset_declaration: true
            - viewport_meta_tag: true
          description: "Verify basic HTML structure and meta information"
        
        - action: "validate_critical_elements"
          elements:
            - "title": 
                present: true
                not_empty: true
                max_length: 60
            - "meta[name='description']":
                present: true
                not_empty: true
                max_length: 160
            - "h1":
                present: true
                count_max: 3  # Allow up to 3 H1s for WordPress flexibility
          description: "Verify critical SEO and accessibility elements"
        
        - action: "check_broken_html"
          validate:
            - unclosed_tags: false
            - duplicate_ids: false
            - missing_alt_attributes: "report_only"
          description: "Check for broken HTML patterns"

  - name: "wordpress_specific_validation"
    description: "Validate WordPress-specific response characteristics"
    priority: "medium"
    reporting:
      epic: "Core Infrastructure"
      feature: "WordPress Validation"
      story: "As a developer, I want to ensure WordPress is functioning correctly"
      severity: "normal"
    
    execution:
      sample_pages: ["homepage", "contact"]  # Test representative pages
      steps:
        - action: "detect_wordpress_version"
          method: "meta_generator"
          report_security_risk: true
          description: "Detect WordPress version exposure"
        
        - action: "validate_wp_head_output"
          expected_elements:
            - "wp-emoji-release"
            - "wp-block-library"
            - "rest-api-link"
          description: "Verify WordPress head output is present"
        
        - action: "check_wp_debug_exposure"
          patterns:
            - "Fatal error"
            - "Warning:"
            - "Notice:"
            - "Parse error"
            - "wp_debug"
          fail_on_detection: true
          description: "Ensure no debug information is exposed"
        
        - action: "validate_wp_security"
          checks:
            - wp_admin_accessible: false  # Should not be publicly accessible
            - wp_config_accessible: false
            - readme_accessible: false
          description: "Verify WordPress security configuration"

assertions:
  critical:
    - "All pages return acceptable HTTP status codes"
    - "Required HTML structure is present"
    - "No WordPress debug information exposed"
    - "No fatal PHP errors displayed"
  
  normal:
    - "Security headers are present"
    - "SEO meta tags are properly configured"
    - "Content-Type headers are correct"
    - "Response sizes are reasonable"
  
  minor:
    - "WordPress version is not exposed"
    - "No HTML validation errors"
    - "Alt attributes present on images"

error_handling:
  soft_assertions: true
  screenshot_on_failure: true
  error_recovery:
    - error_type: "timeout"
      action: "retry_with_longer_timeout"
      timeout: 30000
    - error_type: "server_error"
      action: "log_detailed_error"
      include_response_body: true

integration:
  reporting_reporting:
    include_response_details: true
    attach_headers: true
    security_findings: true
  
  wordpress_monitoring:
    track_plugin_errors: true
    monitor_theme_issues: true
    log_performance_impact: true